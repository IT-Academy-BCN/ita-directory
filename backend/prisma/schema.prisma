datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model UserRole {
  id         Int     @id @default(autoincrement())
  name       String
  admin      Boolean @default(false)
  developer  Boolean @default(false) //Developer role added
  manager    Boolean @default(false)
  registered Boolean @default(false)
  users      User[] //@map("user")

  @@map("user_role")
}

model UserStatus {
  id        Int     @id @default(autoincrement())
  name      String
  active    Boolean @default(false)
  pending   Boolean @default(false)
  suspended Boolean @default(false)
  deleted   Boolean @default(false)
  user      User[] // No puedo mapearlas  - Error parsing attribute "@map": The attribute `@map` cannot be used on relation fields.

  @@map("user_status")
}

model User {
  id                 Int                  @id @default(autoincrement())
  name               String?
  lastnames          String?
  email              String               @unique
  password           String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  user_status        UserStatus           @relation(fields: [user_status_id], references: [id])
  user_status_id     Int
  user_role          UserRole             @relation(fields: [user_role_id], references: [id])
  user_role_id       Int
  acces_log          AccesLog[]
  recover_password   RecoverPasswordLog[]
  media              Media[]
  ads                Ads[]
  developer_data     Json? //Added developer data (not a jsonb?)
  messages_sent      Message[]            @relation("sender")
  user_conversations UserConversation[]   @relation("conv_user")

  @@map("user")
}

model AccesLog {
  id      Int      @id @default(autoincrement())
  login   DateTime
  logout  DateTime
  user    User     @relation(fields: [user_id], references: [id])
  user_id Int

  @@map("acces_log")
}

model RecoverPasswordLog {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  password   String
  user       User     @relation(fields: [user_id], references: [id])
  user_id    Int


  @@map("recover_password_log")
}

model Media {
  id         Int         @id @default(autoincrement())
  path       String
  mime_type  String
  file_size  String
  user       User        @relation(fields: [user_id], references: [id])
  user_id    Int
  media_meta MediaMeta[]

  @@map("media")
}

model MediaMeta {
  id            Int       @id @default(autoincrement())
  path          String
  mime_type     String
  file_size     String
  media         Media     @relation(fields: [media_id], references: [id])
  media_id      Int
  media_type    MediaType @relation(fields: [media_type_id], references: [id])
  media_type_id Int

  @@map("media_meta")
}

model MediaType {
  id         Int         @id @default(autoincrement())
  name       String
  thumnail   Boolean
  medium     Boolean
  large      Boolean
  original   Boolean
  media_meta MediaMeta[]

  @@map("media_type")
}

model LevelType {
  id           Int     @id @default(autoincrement())
  name         String
  country      Int // País
  state        Int // Autonomía
  city         Int // Provincia
  town         Int // Ciudad-Población
  district     Int // Distrito
  neighborhood Int // Barrio
  level        Level[]

  @@map("level_type")
}

model Level {
  id            Int       @id @default(autoincrement())
  name          String
  parent        Level?    @relation("parent", fields: [parent_id], references: [id])
  parent_id     Int?
  child         Level[]   @relation("parent")
  level_type    LevelType @relation(fields: [level_type_id], references: [id])
  level_type_id Int

  @@map("level")
}

model AdType {
  id           Int    @id @default(autoincrement())
  name         String
  house        Int
  room         Int
  garage       Int
  storage      Int
  office       Int
  warehouse    Int
  building     Int
  new_building Int
  ads          Ads[]

  @@map("ad_type")
}

model AdStatus {
  id         Int    @id @default(autoincrement())
  name       String
  un_publish Int
  publish    Int
  ads        Ads[]

  @@map("ad_status")
}

model Ads {

  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [user_id], references: [id])
  user_id       Int
  title         String
  description   String
  location      Int
  n_rooms       Int
  price         Int
  square_meters Int
  n_bathrooms   Int
  map_lat       Decimal
  map_lon       Decimal
  ad_type       AdType   @relation(fields: [ad_type_id], references: [id])
  ad_type_id    Int
  ad_status     AdStatus @relation(fields: [ad_status_id], references: [id])
  ad_status_id  Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@map("ads")
}

model Conversation {
  id           Int                @id @default(autoincrement())
  messages     Message[]          @relation("conv")
  participants UserConversation[] @relation("user_conv")

  @@map("conversation")
}

model UserConversation {
  id              Int          @id @default(autoincrement())
  user            User         @relation("conv_user", fields: [user_id], references: [id])
  user_id         Int
  conversation    Conversation @relation("user_conv", fields: [conversation_id], references: [id])
  conversation_id Int

  @@map("user_conversation")
}

model Message {
  id              Int          @id @default(autoincrement())
  sender          User         @relation("sender", fields: [sender_id], references: [id])
  sender_id       Int
  conversation    Conversation @relation("conv", fields: [conversation_id], references: [id])
  conversation_id Int
  text            String
  created_at      DateTime     @default(now())

  @@map("message")
}
