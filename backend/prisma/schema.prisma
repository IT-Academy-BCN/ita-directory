datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model user_role {
  id         Int     @id @default(autoincrement())
  name       String
  admin      Boolean @default(false)
  developer  Boolean @default(false) //Developer role added
  manager    Boolean @default(false)
  registered Boolean @default(false)
  user       user[]
}

model user_status {
  id        Int     @id @default(autoincrement())
  name      String
  active    Boolean @default(false)
  pending   Boolean @default(false)
  suspended Boolean @default(false)
  deleted   Boolean @default(false)
  user      user[]
}

model user {
  id                Int                    @id @default(autoincrement())
  name              String?
  lastnames         String?
  email             String                 @unique
  password          String
  created_at        DateTime               @default(now())
  updated_at        DateTime               @updatedAt
  user_status       user_status            @relation(fields: [user_status_id], references: [id])
  user_status_id    Int
  user_role         user_role              @relation(fields: [user_role_id], references: [id])
  user_role_id      Int
  acces_log         acces_log[]
  recover_password  recover_password_log[]
  media             media[]
  ads               ads[]
  developer_data    Json? //Added developer data (not a jsonb?)
  messages_sent     message[]              @relation("sender")
  user_conversation user_conversation[]    @relation("conv_user")
}

model acces_log {
  id      Int      @id @default(autoincrement())
  login   DateTime
  logout  DateTime
  user    user     @relation(fields: [user_id], references: [id])
  user_id Int
}

model recover_password_log {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  password   String
  user       user     @relation(fields: [user_id], references: [id])
  user_id    Int

}

model media {
  id         Int          @id @default(autoincrement())
  path       String
  mime_type  String
  file_size  String
  user       user         @relation(fields: [user_id], references: [id])
  user_id    Int
  media_meta media_meta[]
}

model media_meta {
  id            Int        @id @default(autoincrement())
  path          String
  mime_type     String
  file_size     String
  media         media      @relation(fields: [media_id], references: [id])
  media_id      Int
  media_type    media_type @relation(fields: [media_type_id], references: [id])
  media_type_id Int
}

model media_type {
  id         Int          @id @default(autoincrement())
  name       String
  thumnail   Boolean
  medium     Boolean
  large      Boolean
  original   Boolean
  media_meta media_meta[]
}

model level_type {
  id           Int     @id @default(autoincrement())
  name         String
  country      Int // País
  state        Int // Autonomía
  city         Int // Provincia
  town         Int // Ciudad-Población
  district     Int // Distrito
  neighborhood Int // Barrio
  level        level[]
}

model level {
  id            Int        @id @default(autoincrement())
  name          String
  parent        level?     @relation("parent", fields: [parent_id], references: [id])
  parent_id     Int?
  child         level[]    @relation("parent")
  level_type    level_type @relation(fields: [level_type_id], references: [id])
  level_type_id Int
}

model ad_type {
  id           Int    @id @default(autoincrement())
  name         String
  house        Int
  room         Int
  garage       Int
  storage      Int
  office       Int
  warehouse    Int
  building     Int
  new_building Int
  ads          ads[]
}

model ad_status {
  id         Int    @id @default(autoincrement())
  name       String
  un_publish Int
  publish    Int
  ads        ads[]
}

model ads {

  id            Int       @id @default(autoincrement())
  user          user      @relation(fields: [user_id], references: [id])
  user_id       Int
  title         String
  description   String
  location      Int
  n_rooms       Int
  price         Int
  square_meters Int
  n_bathrooms   Int
  map_lat       Decimal
  map_lon       Decimal
  ad_type       ad_type   @relation(fields: [ad_type_id], references: [id])
  ad_type_id    Int
  ad_status     ad_status @relation(fields: [ad_status_id], references: [id])
  ad_status_id  Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model conversation {
  id           Int                 @id @default(autoincrement())
  message      message[]           @relation("conv")
  conversation user_conversation[] @relation("user_conv")
}

model user_conversation {
  id              Int          @id @default(autoincrement())
  user            user         @relation("conv_user", fields: [user_id], references: [id])
  user_id         Int
  conversation    conversation @relation("user_conv", fields: [conversation_id], references: [id])
  conversation_id Int
}

model message {
  id              Int          @id @default(autoincrement())
  sender          user         @relation("sender", fields: [sender_id], references: [id])
  sender_id       Int
  conversation    conversation @relation("conv", fields: [conversation_id], references: [id])
  conversation_id Int
  text            String
  created_at      DateTime     @default(now())
}
