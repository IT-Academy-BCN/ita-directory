
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.8.1
 * Query Engine version: 34df67547cf5598f5a6cd3eb45f14ee70c3fb86f
 */
Prisma.prismaVersion = {
  client: "3.8.1",
  engine: "34df67547cf5598f5a6cd3eb45f14ee70c3fb86f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.User_roleScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  admin: 'admin',
  manager: 'manager',
  registered: 'registered'
});

exports.Prisma.User_statusScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  active: 'active',
  pending: 'pending',
  suspended: 'suspended',
  deleted: 'deleted'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  lastnames: 'lastnames',
  email: 'email',
  password: 'password',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_status_id: 'user_status_id',
  user_role_id: 'user_role_id'
});

exports.Prisma.Acces_logScalarFieldEnum = makeEnum({
  id: 'id',
  login: 'login',
  logout: 'logout',
  user_id: 'user_id'
});

exports.Prisma.Recover_password_logScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  password: 'password',
  user_id: 'user_id'
});

exports.Prisma.MediaScalarFieldEnum = makeEnum({
  id: 'id',
  path: 'path',
  mime_type: 'mime_type',
  file_size: 'file_size',
  user_id: 'user_id'
});

exports.Prisma.Media_metaScalarFieldEnum = makeEnum({
  id: 'id',
  path: 'path',
  mime_type: 'mime_type',
  file_size: 'file_size',
  media_id: 'media_id',
  media_type_id: 'media_type_id'
});

exports.Prisma.Media_typeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  thumnail: 'thumnail',
  medium: 'medium',
  large: 'large',
  original: 'original'
});

exports.Prisma.Ad_typeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  house: 'house',
  room: 'room',
  garage: 'garage',
  storage: 'storage',
  office: 'office',
  warehouse: 'warehouse',
  building: 'building',
  new_building: 'new_building'
});

exports.Prisma.AdsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  description: 'description',
  city: 'city',
  n_rooms: 'n_rooms',
  price: 'price',
  square_meters: 'square_meters',
  n_bathrooms: 'n_bathrooms',
  map_lat: 'map_lat',
  map_lon: 'map_lon',
  ad_type_id: 'ad_type_id'
});

exports.Prisma.LevelScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  parent_id: 'parent_id',
  level_type_id: 'level_type_id'
});

exports.Prisma.Level_typeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  country: 'country',
  state: 'state',
  city: 'city',
  town: 'town',
  district: 'district',
  neighbourhood: 'neighbourhood'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  user_role: 'user_role',
  user_status: 'user_status',
  user: 'user',
  acces_log: 'acces_log',
  recover_password_log: 'recover_password_log',
  media: 'media',
  media_meta: 'media_meta',
  media_type: 'media_type',
  ad_type: 'ad_type',
  ads: 'ads',
  level: 'level',
  level_type: 'level_type'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
